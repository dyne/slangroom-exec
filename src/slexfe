#!/usr/bin/env bash
# SLangroom-EXec Format Encoder
# This script is used to encode the format of the slangroom-exec command
# into a string that can be used in the slangroom-exec command

print_help() {
    echo -e "\033[1mUsage:\033[0m"
    echo -e "  $0 [options]\n"
    echo -e "\033[1mOptions:\033[0m"
    echo -e "  -c, --conf               conf filename to read"
    echo -e "  -s, --slangroom-contract slangroom-contract filename to read"
    echo -e "  -d, --data               data filename to read"
    echo -e "  -k, --keys               keys filename to read"
    echo -e "  -e, --extra              extra filename to read"
    echo -e "  -x, --context            context filename to read"
    echo -e "  -F, --filename           lookup files based on a prefix"
    echo -e "  -h, --help               Print this help message"
    echo -e "\nEncode the parameters into a base64 string."
    exit 1
}

# Function to encode to base64
encode_base64() {
    cat "$1" 2>/dev/null | base64 -w 0
}

encode_json_base64() {
    jq -c . "$1" 2>/dev/null | base64 -w 0
}

# check that jq and getopt are installed

if ! command -v jq &> /dev/null; then
    echo "jq is not installed. Please install jq to use this script."
    exit 1
fi

if ! command -v getopt &> /dev/null; then
    echo "getopt is not installed. Please install getopt to use this script."
    exit 1
fi

# Default values for options
conf=""
slangroom_contract=""
data=""
keys=""
extra=""
context=""

OPTIONS=$(getopt -o c:s:d:k:e:x:F:h --long conf:,slangroom-contract:,data:,keys:,extra:,context:,filename:,help -n 'parse-options' -- "$@")
if [ $? -ne 0 ]; then
    echo "Failed to parse options." >&2
    exit 1
fi
eval set -- "$OPTIONS"

while true; do
    case "$1" in
        -c|--conf)
            conf=$(encode_base64 "$2"); shift 2 ;;
        -s|--slangroom-contract)
            slangroom_contract=$(encode_base64 "$2"); shift 2 ;;
        -d|--data)
            data=$(encode_json_base64 "$2"); shift 2 ;;
        -k|--keys)
            keys=$(encode_json_base64 "$2"); shift 2 ;;
        -e|--extra)
            extra=$(encode_json_base64 "$2"); shift 2 ;;
        -x|--context)
            context=$(encode_base64 "$2"); shift 2 ;;
        -F|--filename)
            conf=$(encode_base64 "${2}.conf")
            slangroom_contract=$(encode_base64 "${2}.slang")
            data=$(encode_json_base64 "${2}.data.json")
            keys=$(encode_json_base64 "${2}.keys.json")
            extra=$(encode_json_base64 "${2}.extra.json")
            context=$(encode_base64 "${2}.context")
            shift 2 ;;
        -h|--help)
            print_help ;;
        --)
            shift; break ;;
        *)
            echo "Internal error!"; exit 1 ;;
    esac
done

# if slangroom-contract is empty, read it from stdin
if [ -z "$slangroom_contract" ]; then
    slangroom_contract=$(encode_base64 -)
fi

# Print the encoded string
echo -e "${conf}\n${slangroom_contract}\n${data}\n${keys}\n${extra}\n${context}"
